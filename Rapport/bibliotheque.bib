
@online{noauthor_why_nodate,
	title = {Why Wasm is the future of cloud-native app development {\textbar} {TechTarget}},
	url = {https://www.techtarget.com/searchitoperations/opinion/Why-Wasm-is-the-future-of-cloud-native-app-development},
	abstract = {2023 has already seen {WebAssembly} explode in popularity. Get an industry analyst's take on Wasm's significance for cloud-native application development.},
	titleaddon = {{IT} Operations},
	urldate = {2023-02-12},
	langid = {english},
	file = {Snapshot:/home/kira/Zotero/storage/SJD6EPVF/Why-Wasm-is-the-future-of-cloud-native-app-development.html:text/html},
}

@online{jesuisundev_comprendre_2020,
	title = {Comprendre {WebAssembly} en 5 minutes},
	url = {https://www.jesuisundev.com/comprendre-webassembly-en-5-minutes/},
	abstract = {{WebAssembly} a rejoint le {HTML}, {CSS} et Javascript en tant que standard du web le 5 décembre 2019. Ça va être utile pour beaucoup de choses.},
	titleaddon = {Je suis un dev},
	author = {jesuisundev},
	urldate = {2023-02-12},
	date = {2020-02-03},
	langid = {french},
	file = {Snapshot:/home/kira/Zotero/storage/7F23EEU5/comprendre-webassembly-en-5-minutes.html:text/html},
}

@inproceedings{pinckney_wasmk_2020,
	location = {New York, {NY}, {USA}},
	title = {Wasm/k: delimited continuations for {WebAssembly}},
	isbn = {978-1-4503-8175-8},
	url = {https://doi.org/10.1145/3426422.3426978},
	doi = {10.1145/3426422.3426978},
	series = {{DLS} 2020},
	shorttitle = {Wasm/k},
	abstract = {{WebAssembly} is designed to be an alternative to {JavaScript} that is a safe, portable, and efficient compilation target for a variety of languages. The performance of high-level languages depends not only on the underlying performance of {WebAssembly}, but also on the quality of the generated {WebAssembly} code. In this paper, we identify several features of high-level languages that current approaches can only compile to {WebAssembly} by generating complex and inefficient code. We argue that these problems could be addressed if {WebAssembly} natively supported first-class continuations. We then present Wasm/k, which extends {WebAssembly} with delimited continuations. Wasm/k introduces no new value types, and thus does not require significant changes to the {WebAssembly} type system (validation). Wasm/k is safe, even in the presence of foreign function calls (e.g., to and from {JavaScript}). Finally, Wasm/k is amenable to efficient implementation: we implement Wasm/k as a local change to Wasmtime, an existing {WebAssembly} {JIT}. We evaluate Wasm/k by implementing C/k, which adds delimited continuations to C/C++. C/k uses Emscripten and its implementation serves as a case study on how to use Wasm/k in a compiler that targets {WebAssembly}. We present several case studies using C/k, and show that on implementing green threads, it can outperform the state-of-the-art approach Asyncify with an 18\% improvement in performance and a 30\% improvement in code size.},
	pages = {16--28},
	booktitle = {Proceedings of the 16th {ACM} {SIGPLAN} International Symposium on Dynamic Languages},
	publisher = {Association for Computing Machinery},
	author = {Pinckney, Donald and Guha, Arjun and Brun, Yuriy},
	urldate = {2023-02-12},
	date = {2020-11-15},
	keywords = {first-class continuations, formal language semantics, virtual machines},
	file = {Version soumise:/home/kira/Zotero/storage/YC2F2W6W/Pinckney et al. - 2020 - Wasmk delimited continuations for WebAssembly.pdf:application/pdf},
}

@online{noauthor_evaluation_nodate,
	title = {An Evaluation of {WebAssembly} in Non-Web Environments {\textbar} {IEEE} Conference Publication {\textbar} {IEEE} Xplore},
	url = {https://ieeexplore.ieee.org/document/9640153/},
	urldate = {2023-02-12},
}

@online{noauthor_webassembly_nodate,
	title = {{WebAssembly}},
	url = {https://webassembly.org/},
	urldate = {2023-02-12},
	file = {WebAssembly:/home/kira/Zotero/storage/SVF2RV34/webassembly.org.html:text/html},
}

@inreference{noauthor_webassembly_2023,
	title = {{WebAssembly}},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=WebAssembly&oldid=1133857733},
	abstract = {{WebAssembly} (sometimes abbreviated Wasm) defines a portable binary-code format and a corresponding text format for executable programs as well as software interfaces for facilitating interactions between such programs and their host environment.The main goal of {WebAssembly} is to enable high-performance applications on web pages, "but it does not make any Web-specific assumptions or provide Web-specific features, so it can be employed in other environments as well." It is an open standard and aims to support any language on any operating system, and in practice all of the most popular languages already have at least some level of support.
Announced in 2015 (2015) and first released in March 2017 (2017-03), {WebAssembly} became a World Wide Web Consortium recommendation on 5 December 2019 and it received the Programming Languages Software Award from {ACM} {SIGPLAN} in 2021. The World Wide Web Consortium (W3C) maintains the standard with contributions from Mozilla, Microsoft, Google, Apple, Fastly, Intel, and Red Hat.},
	booktitle = {Wikipedia},
	urldate = {2023-02-12},
	date = {2023-01-15},
	langid = {english},
	note = {Page Version {ID}: 1133857733},
	file = {Snapshot:/home/kira/Zotero/storage/QGSJMJCQ/WebAssembly.html:text/html},
}

@online{dubovyk_its_2023,
	title = {It’s 2023 and {WebAssembly} is Still Not Ready. Or is It?},
	url = {https://betterprogramming.pub/its-2023-and-webassembly-is-still-not-ready-or-is-it-993699685811},
	abstract = {A tale about how it was never about performance in the first place.},
	titleaddon = {Medium},
	author = {Dubovyk, Sergey},
	urldate = {2023-02-20},
	date = {2023-01-24},
	langid = {english},
	file = {Snapshot:/home/kira/Zotero/storage/TRIU78Y7/its-2023-and-webassembly-is-still-not-ready-or-is-it-993699685811.html:text/html},
}

@article{watt_weakening_2019,
	title = {Weakening {WebAssembly}},
	volume = {3},
	url = {https://doi.org/10.1145/3360559},
	doi = {10.1145/3360559},
	abstract = {{WebAssembly} (Wasm) is a safe, portable virtual instruction set that can be hosted in a wide range of environments, such as a Web browser. It is a low-level language whose instructions are intended to compile directly to bare hardware. While the initial version of Wasm focussed on single-threaded computation, a recent proposal extends it with low-level support for multiple threads and atomic instructions for synchronised access to shared memory. To support the correct compilation of concurrent programs, it is necessary to give a suitable specification of its memory model. Wasm's language definition is based on a fully formalised specification that carefully avoids undefined behaviour. We present a substantial extension to this semantics, incorporating a relaxed memory model, along with a few proposed extensions. Wasm's memory model is unique in that its linear address space can be dynamically grown during execution, while all accesses are bounds-checked. This leads to the novel problem of specifying how observations about the size of the memory can propagate between threads. We argue that, considering desirable compilation schemes, we cannot give a sequentially consistent semantics to memory growth. We show that our model provides sequential consistency for data-race-free executions ({SC}-{DRF}). However, because Wasm is to run on the Web, we must also consider interoperability of its model with that of {JavaScript}. We show, by counter-example, that {JavaScript}'s memory model is not {SC}-{DRF}, in contrast to what is claimed in its specification. We propose two axiomatic conditions that should be added to the {JavaScript} model to correct this difference. We also describe a prototype {SMT}-based litmus tool which acts as an oracle for our axiomatic model, visualising its behaviours, including memory resizing.},
	pages = {133:1--133:28},
	issue = {{OOPSLA}},
	journaltitle = {Proceedings of the {ACM} on Programming Languages},
	shortjournal = {Proc. {ACM} Program. Lang.},
	author = {Watt, Conrad and Rossberg, Andreas and Pichon-Pharabod, Jean},
	urldate = {2023-02-20},
	date = {2019-10-10},
	keywords = {assembly languages, just-in-time compilers, programming languages, type systems, Virtual machines},
	file = {Full Text PDF:/home/kira/Zotero/storage/T2K9YIAS/Watt et al. - 2019 - Weakening WebAssembly.pdf:application/pdf},
}

@misc{ullrich_counting_2020,
	title = {Counting Immutable Beans: Reference Counting Optimized for Purely Functional Programming},
	url = {http://arxiv.org/abs/1908.05647},
	doi = {10.48550/arXiv.1908.05647},
	shorttitle = {Counting Immutable Beans},
	abstract = {Most functional languages rely on some garbage collection for automatic memory management. They usually eschew reference counting in favor of a tracing garbage collector, which has less bookkeeping overhead at runtime. On the other hand, having an exact reference count of each value can enable optimizations, such as destructive updates. We explore these optimization opportunities in the context of an eager, purely functional programming language. We propose a new mechanism for efficiently reclaiming memory used by nonshared values, reducing stress on the global memory allocator. We describe an approach for minimizing the number of reference counts updates using borrowed references and a heuristic for automatically inferring borrow annotations. We implemented all these techniques in a new compiler for an eager and purely functional programming language with support for multi-threading. Our preliminary experimental results demonstrate our approach is competitive and often outperforms state-of-the-art compilers.},
	number = {{arXiv}:1908.05647},
	publisher = {{arXiv}},
	author = {Ullrich, Sebastian and de Moura, Leonardo},
	urldate = {2023-03-08},
	date = {2020-03-05},
	eprinttype = {arxiv},
	eprint = {1908.05647 [cs]},
	keywords = {Computer Science - Programming Languages},
	file = {arXiv Fulltext PDF:/home/kira/Zotero/storage/RK8782EQ/Ullrich et de Moura - 2020 - Counting Immutable Beans Reference Counting Optim.pdf:application/pdf;arXiv.org Snapshot:/home/kira/Zotero/storage/QYXW9H7K/1908.html:text/html},
}
