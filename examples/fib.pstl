(let fib n (if (n>0) (n*(fib (n-1))) (1)) ())
(fib 5)
(let t (constr T 1 2 3) (
    let a t.0 (
        let b t.1 (
            let c t.2 (a)
        )
    )
))
((fun nom a r g s (+ a (+ r (+ g s)))) 1 (nom 2 3 4 5) 3 4)
; (nom 1 2 3 4) ; non disponible ici

(fun in f a (f a))
(in (fun _ a (+ a 10)) 10) ; 20



(fun out a f (f a))
(let apply (out 10) (
    (apply (fun _ a (+ a 10))) ; s'évalue en 20
))


; (function a b c d e) ; s'evalue en la fonction partielle function_a (avec l'argument a appliqué)
; (function_a b c d e)
; (function_ab c d e)
; (function_abc d e)
; (function_abcd e)
; (function_abcde)


(fun example a (out a (fun _ e (+ e 5))))